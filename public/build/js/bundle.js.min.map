{"version":3,"sources":["mapa.js","proveedores.js","tags.js"],"names":["document","querySelector","lat","lng","zoom","map","L","setView","tileLayer","attribution","addTo","marker","bindPopup","openPopup","proveedoresInput","proveedores","proveedoresFiltrados","listadoProveedores","proveedorHidden","formatearProveedores","arrayProveedores","proveedor","nombre","trim","telefono","id","seleccionarProveedor","e","target","proveedorPrevio","classList","remove","add","value","dataset","proveedorId","async","respuesta","fetch","json","obtenerProveedores","addEventListener","busqueda","length","expresion","RegExp","filter","toLowerCase","search","firstChild","removeChild","forEach","proveedorHTML","createElement","textContent","onclick","appendChild","noResultados","mostrarProveedores","tagsInput","tagsDiv","tagsInputHidden","tags","mostrarTags","tag","etiqueta","ondblclick","eliminarTag","actualizarInputHidden","toString","split","keyCode","preventDefault"],"mappings":"AAAA,GAAAA,SAAAC,cAAA,SAAA,CAEA,MAAAC,GAAA,kBACAC,GAAA,kBACAC,EAAA,GAEAC,EAAAC,EAAAD,IAAA,QAAAE,QAAA,CAAAL,EAAAC,GAAAC,GAEAE,EAAAE,UAAA,iDAAA,CACAC,YAAA,4FACAC,MAAAL,GAEAC,EAAAK,OAAA,CAAAT,EAAAC,IAAAO,MAAAL,GACAO,UAAA,6HAIAC,aCjBA,WACA,MAAAC,EAAAd,SAAAC,cAAA,gBAEA,GAAAa,EAAA,CACA,IAAAC,EAAA,GACAC,EAAA,GAEA,MAAAC,EAAAjB,SAAAC,cAAA,wBACAiB,EAAAlB,SAAAC,cAAA,yBAiCA,SAAAkB,EAAAC,EAAA,IACAL,EAAAK,EAAAf,IAAAgB,IACA,CACAC,OAAA,GAAAD,EAAAC,OAAAC,UAAAF,EAAAG,SAAAD,SACAE,GAAAJ,EAAAI,MA+CA,SAAAC,EAAAC,GACA,MAAAN,EAAAM,EAAAC,OAIAC,EAAA7B,SAAAC,cAAA,iDACA4B,GACAA,EAAAC,UAAAC,OAAA,gDAEAV,EAAAS,UAAAE,IAAA,gDAEAd,EAAAe,MAAAZ,EAAAa,QAAAC,aA5EAC,iBACA,MACAC,QAAAC,MADA,oBAGAnB,QADAkB,EAAAE,QApBAC,GACA1B,EAAA2B,iBAAA,SAuCA,SAAAd,GACA,MAAAe,EAAAf,EAAAC,OAAAK,MAEA,GAAAS,EAAAC,OAAA,EAAA,CACA,MAAAC,EAAA,IAAAC,OAAAH,EAAA,KACA1B,EAAAD,EAAA+B,OAAAzB,IACA,IAAA,GAAAA,EAAAC,OAAAyB,cAAAC,OAAAJ,GACA,OAAAvB,SAIAL,EAAA,IAMA,WAEA,KAAAC,EAAAgC,YACAhC,EAAAiC,YAAAjC,EAAAgC,YAGA,GAAAjC,EAAA2B,OAAA,EACA3B,EAAAmC,QAAA9B,IACA,MAAA+B,EAAApD,SAAAqD,cAAA,MACAD,EAAAtB,UAAAE,IAAA,kCACAoB,EAAAE,YAAAjC,EAAAC,OACA8B,EAAAlB,QAAAC,YAAAd,EAAAI,GACA2B,EAAAG,QAAA7B,EAGAT,EAAAuC,YAAAJ,SAEA,CACA,MAAAK,EAAAzD,SAAAqD,cAAA,KACAI,EAAA3B,UAAAE,IAAA,qCACAyB,EAAAH,YAAA,qCACArC,EAAAuC,YAAAC,IAxBAC,MAnDAxC,EAAAe,OAbA,GCAA,WAEA,MAAA0B,EAAA3D,SAAAC,cAAA,eAEA,GAAA0D,EAAA,CAEA,MAAAC,EAAA5D,SAAAC,cAAA,SACA4D,EAAA7D,SAAAC,cAAA,iBAEA,IAAA6D,EAAA,GAwBA,SAAAC,IACAH,EAAAN,YAAA,GACAQ,EAAAX,QAAAa,IACA,MAAAC,EAAAjE,SAAAqD,cAAA,MACAY,EAAAnC,UAAAE,IAAA,mBACAiC,EAAAX,YAAAU,EACAC,EAAAC,WAAAC,EACAP,EAAAJ,YAAAS,KAEAG,IAGA,SAAAD,EAAAxC,GACAA,EAAAC,OAAAG,SACA+B,EAAAA,EAAAhB,OAAAkB,GAAAA,IAAArC,EAAAC,OAAA0B,aACAc,IAGA,SAAAA,IACAP,EAAA5B,MAAA6B,EAAAO,WAxCA,KAAAR,EAAA5B,QACA6B,EAAAD,EAAA5B,MAAAqC,MAAA,KACAP,KAIAJ,EAAAlB,iBAAA,YAEA,SAAAd,GACA,GAAA,KAAAA,EAAA4C,QAAA,CAEA,GAAA,KAAA5C,EAAAC,OAAAK,MAAAV,QAAAI,EAAAC,OAAAK,MAAA,EACA,OAEAN,EAAA6C,iBACAV,EAAA,IAAAA,EAAAnC,EAAAC,OAAAK,MAAAV,QACAoC,EAAA1B,MAAA,GACA8B,SA7BA","file":"bundle.js","sourcesContent":["if(document.querySelector('#mapa')) {\r\n\r\n    const lat = -17.38781962353542\r\n    const lng = -66.17257206242056\r\n    const zoom = 16\r\n\r\n    const map = L.map('mapa').setView([lat, lng], zoom);\r\n\r\n    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n    }).addTo(map);\r\n\r\n    L.marker([lat, lng]).addTo(map)\r\n        .bindPopup(`\r\n            <h2 class=\"mapa__heading\">Silicom</h2>\r\n            <p class=\"mapa__texto\">Empresa de Silicom</p>\r\n        `)\r\n        .openPopup();\r\n}","(function() {\r\n    const proveedoresInput = document.querySelector('#proveedores');\r\n\r\n    if(proveedoresInput) {\r\n        let proveedores = [];\r\n        let proveedoresFiltrados = [];\r\n\r\n        const listadoProveedores = document.querySelector('#listado-proveedores')\r\n        const proveedorHidden = document.querySelector('[name=\"proveedor_id\"]')\r\n\r\n        obtenerProveedores();\r\n        proveedoresInput.addEventListener('input', buscarProveedores)\r\n\r\n        if (proveedorHidden.value) {\r\n            (async() => {\r\n                const proveedor = await obtenerProveedor(proveedorHidden.value)\r\n                const { nombre, telefono} = proveedor\r\n\r\n                //Insertar en el HTML\r\n                const proveedorDOM = document.createElement('LI')\r\n                proveedorDOM.classList.add('listado-proveedores__proveedor', 'listado-proveedores__proveedor--seleccionado');\r\n                proveedorDOM.textContent = `${nombre} ${telefono}`\r\n\r\n                listadoProveedores.appendChild(proveedorDOM)\r\n            })\r\n        }\r\n\r\n        async function obtenerProveedores() {\r\n            const url = `/api/proveedores`;\r\n            const respuesta = await fetch(url);\r\n            const resultado = await respuesta.json();\r\n            formatearProveedores(resultado)\r\n        }\r\n\r\n        async function obtenerProveedor(id) {\r\n           const url = `/api/proveedores?id=${id}`;\r\n           const respuesta = await fetch(url);\r\n           const resultado = await respuesta.json();\r\n           formatearProveedores(resultado)\r\n        }\r\n\r\n        function formatearProveedores(arrayProveedores = []) {\r\n            proveedores = arrayProveedores.map( proveedor => {\r\n                return {\r\n                    nombre: `${proveedor.nombre.trim()} ${proveedor.telefono.trim()}`,\r\n                    id: proveedor.id\r\n                }\r\n            })\r\n        }\r\n\r\n        function buscarProveedores(e) {\r\n            const busqueda = e.target.value;\r\n\r\n            if(busqueda.length > 3) {\r\n                const expresion = new RegExp(busqueda, \"i\");\r\n                proveedoresFiltrados = proveedores.filter(proveedor => {\r\n                    if(proveedor.nombre.toLowerCase().search(expresion) != -1) {\r\n                        return proveedor\r\n                    }\r\n                })\r\n            } else {\r\n                proveedoresFiltrados = []\r\n            }\r\n\r\n            mostrarProveedores();\r\n        }\r\n        \r\n        function mostrarProveedores() {\r\n\r\n            while(listadoProveedores.firstChild) {\r\n                listadoProveedores.removeChild(listadoProveedores.firstChild) //limpia lo insertado\r\n            }\r\n\r\n            if(proveedoresFiltrados.length > 0) {\r\n                proveedoresFiltrados.forEach(proveedor => {\r\n                    const proveedorHTML = document.createElement('LI');\r\n                    proveedorHTML.classList.add('listado-proveedores__proveedor')\r\n                    proveedorHTML.textContent = proveedor.nombre;\r\n                    proveedorHTML.dataset.proveedorId = proveedor.id\r\n                    proveedorHTML.onclick = seleccionarProveedor\r\n    \r\n                    //añadir al DOM\r\n                    listadoProveedores.appendChild(proveedorHTML)\r\n                })\r\n            } else {\r\n                const noResultados = document.createElement('P')\r\n                noResultados.classList.add('listado-proveedores__no-resultado')\r\n                noResultados.textContent = 'No hay resultados para tu búsqueda'\r\n                listadoProveedores.appendChild(noResultados)\r\n            }         \r\n        }\r\n\r\n        function seleccionarProveedor(e) {\r\n            const proveedor = e.target;\r\n\r\n            //Remover la clase previa\r\n\r\n            const proveedorPrevio = document.querySelector('.listado-proveedores__proveedor--seleccionado')\r\n            if(proveedorPrevio) {\r\n                proveedorPrevio.classList.remove('listado-proveedores__proveedor--seleccionado')\r\n            }\r\n            proveedor.classList.add('listado-proveedores__proveedor--seleccionado')\r\n\r\n            proveedorHidden.value = proveedor.dataset.proveedorId\r\n        }\r\n    }\r\n\r\n}) ();","(function() { //se ejecuta inmediatamente\r\n\r\n    const tagsInput = document.querySelector('#tags_input'); // id\r\n    \r\n    if(tagsInput) {\r\n\r\n        const tagsDiv = document.querySelector('#tags'); //seleccionar el elemento con el id 'tags' y se van instertando en tags\r\n        const tagsInputHidden = document.querySelector('[name=\"tags\"]'); //name\r\n\r\n        let tags = [];\r\n\r\n        // Recuperar del input oculto\r\n        if(tagsInputHidden.value !== '') {\r\n            tags = tagsInputHidden.value.split(',');\r\n            mostrarTags();\r\n        }\r\n\r\n        // Escuchar los cambio en el input\r\n        tagsInput.addEventListener('keypress', guardarTag); //cada cosa que se coloca se guarda\r\n\r\n        function guardarTag(e) {\r\n            if(e.keyCode === 44) { //44 es la coma que hace la separacion\r\n\r\n                if(e.target.value.trim() === '' || e.target.value < 1) { //controla que no deje espacio en blanco\r\n                    return;\r\n                }\r\n                e.preventDefault();\r\n                tags = [...tags, e.target.value.trim()]; // '...tags' copia las etiquetas actuales y trim para borrar espacios en blanco\r\n                tagsInput.value = '';\r\n                mostrarTags();\r\n            }\r\n        }\r\n\r\n        function mostrarTags() {\r\n            tagsDiv.textContent = '';\r\n            tags.forEach(tag => {\r\n                const etiqueta = document.createElement('LI'); // creamos un elemento li osea el punto\r\n                etiqueta.classList.add('formulario__tag') //se agrega las etiquetas con la clase formulario__tag\r\n                etiqueta.textContent = tag;\r\n                etiqueta.ondblclick = eliminarTag; //doble click elimina\r\n                tagsDiv.appendChild(etiqueta); //agregando\r\n            })\r\n            actualizarInputHidden();\r\n        }\r\n\r\n        function eliminarTag(e) { // 'e' selecciona evento\r\n            e.target.remove();\r\n            tags = tags.filter(tag => tag !== e.target.textContent); //trae a todos los tags que no sea al que no le di click y el filter retarna un nuevo arreglo\r\n            actualizarInputHidden();\r\n        }\r\n\r\n        function actualizarInputHidden() { //agregamos funcion para agregar o quitar etiquetas del array\r\n            tagsInputHidden.value = tags.toString(); //converitr el arreglo dentro de un string\r\n        }\r\n    }\r\n\r\n})(); //'()' llama a la funcion"]}